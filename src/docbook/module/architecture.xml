<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % CustomDTD SYSTEM "../custom.dtd">
%CustomDTD; 
]>
<chapter id="architecture">
  <title>Architecture</title>
  <para>
    In this chapter, we will examine what core functionalities are provided in
    Netty and how they constitute a complete network application development
    stack.  Interesting features of each core component will be explained in
    detail, too.
  </para>

  <section>
    <title>Rich Buffer Data Structure</title>
    <para>
      Netty uses its own buffer API instead of NIO <classname>ByteBuffer</classname>
      to represent a sequence of bytes. This approach has significant advantage
      over using <classname>ByteBuffer</classname>.  Netty's new buffer type,
      &ChannelBuffer; has been designed from ground up to address the problems
      of <classname>ByteBuffer</classname> and to meet the daily needs of
      network application developers.  To list a few cool features:
      <itemizedlist>
        <listitem>
          <para>
            You can define your buffer type if necessary.
          </para>
        </listitem>
        <listitem>
          <para>
            Transparent zero copy is achieved by built-in composite buffer type.
          </para>
        </listitem>
        <listitem>
          <para>
            A dynamic buffer type is provided out-of-the-box, whose capacity is
            is expanded on demand, just like <classname>StringBuffer</classname>.
          </para>
        </listitem>
        <listitem>
          <para>
            There's no need to call <methodname>flip()</methodname> anymore.
          </para>
        </listitem>
        <listitem>
          <para>
            It is often faster than <classname>ByteBuffer</classname>.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      For more information, please refer to <xref linkend="buffer"/>.
    </para>
  </section>

  <section>
    <title>Universal Asynchronous I/O API</title>
    <para>
      Traditional I/O APIs in Java provided different types and methods for
      different transport types.  For example,
      <classname>java.net.Socket</classname> and
      <classname>java.net.DatagramSocket</classname> do not have any common
      super type and therefore they have very different ways to perform socket
      I/O.
    </para>
    <para>
      This mismatch makes porting a network application from one transport to
      the other.  The lack of portability between transports becomes a problem
      when you need to support more transports not rewriting the network layer
      of the application.  Logically, many protocols can run on more than one
      transport such as TCP/IP, UDP/IP, SCTP, and serial port communication.
    </para>
    <para>
      To make the matter worse, Java New I/O (NIO) API introduced the
      incompatibility with the old blocking I/O (OIO) API, and so will NIO.2
      (AIO).  Because all these APIs are different from each other in design
      and performance characteristics, you are often forced to determine which
      API your application will depend on before you even begin the
      implementation phase.
    </para>
    <para>
      For instance, you might want to start with OIO because the number of
      clients you are going to serve will be very small and writing a socket
      server using OIO is much easier than using NIO.  However, you are going
      to be in trouble when your business grows up exponentially and your server
      starts to serve tens of thousand clients simultaneously.  You could
      start with NIO, but it might take much longer time to implement due to
      the complexity of the NIO Selector API, hindering rapid development.
    </para>
    <para>
      Netty has a universal asynchronous I/O interface called &Channel;, which
      abstracts away all operations required to point-to-point communication.
      That is, once you wrote your application on one Netty transport, your
      application can run on other Netty transports.  Netty provides a number
      of essential transports via one universal API:
      <itemizedlist>
        <listitem>
          <para>
            NIO-based TCP/IP transport
            (See <literal>org.jboss.netty.channel.socket.nio</literal>),
          </para>
        </listitem>
        <listitem>
          <para>
            OIO-based TCP/IP transport
            (See <literal>org.jboss.netty.channel.socket.oio</literal>),
          </para>
        </listitem>
        <listitem>
          <para>OIO-based UDP/IP transport, and</para>
        </listitem>
        <listitem>
          <para>
            Local transport (See <literal>org.jboss.netty.channel.local</literal>).
          </para>
        </listitem>
      </itemizedlist>
      Switching from one transport from the other usually takes just a couple
      lines of changes such as choosing a different &ChannelFactory;
      implementation.
    </para>
    <para>
      Also, you are even able to take advantage of a new transport which is
      not written yet, serial port communication transport for instance, again
      by replacing just a couple lines of constructor calls.  Moreover, you can
      write your own transport by extending the core API because it is highly
      extensible.
    </para>
  </section>
  
  <section>
    <title>Event Model based on the Interceptor Chain Pattern</title>
    <para>
      Well-defined and extensible event model is a must for an event-driven
      application.  Netty does have a well-defined event model focused on I/O.
      It also allows you to implement your own event type without breaking the
      existing code at all because each event type is distinguished from
      each other by strict type hierarchy.  This is another differentiator
      against its competitors.  Many NIO frameworks have no or very limited
      notion of event model; they often break the existing code when you try
      to add a new custom event type, or just do not allow extension.
    </para>
    <para>
      A &ChannelEvent; is handled by a list of &ChannelHandler;s in a
      &ChannelPipeline;. The pipeline implements an advanced form of the
      <ulink url="http://java.sun.com/blueprints/corej2eepatterns/Patterns/InterceptingFilter.html">Intercepting Filter</ulink>
      pattern to give a user full control over how an event is handled and how
      the handlers in the pipeline interact with each other.  For example,
      you can define what to do when a data is read from a socket:
    </para>
    <programlisting>public class MyReadHandler implements &SimpleChannelHandler; {
    public void messageReceived(&ChannelHandlerContext; ctx, &MessageEvent; evt) {
        Object message = evt.getMessage();
        // Do something with the received message.
        ...
        
        // And forward the event to the next handler.
        ctx.sendUpstream(evt);
    }
}</programlisting>
    <para>
      You can also define what to do when other handler requested a write
      operation:
    </para>
    <programlisting>public class MyWriteHandler implements &SimpleChannelHandler; {
    public void writeRequested(&ChannelHandlerContext; ctx, &MessageEvent; evt) {
        Object message = evt.getMessage();
        // Do something with the message to be written.
        ...
        
        // And forward the event to the next handler.
        ctx.sendDownstream(evt);
    }
}</programlisting>
    <para>
      For more information about the event model of Netty, please refer to the
      API documentation of &ChannelEvent; and &ChannelPipeline;.
    </para>
  </section>
  
  <section>
    <title>Advanced Components for More Rapid Development</title>
    <para>
      On top of the core components mentioned above, that already enable the
      implementation of all types of network applications, Netty provides a set
      of advanced features to accelerate the development pace even more.
    </para>
    
    <section>
      <title>Codec framework</title>
      <para>
        As demonstrated in <xref linkend="start.pojo"/>, it is always a good
        idea to separate a protocol codec from a business logic. However, there
        are some complications when implementing this idea from scratch.  You
        have to deal with the fragmentation of messages. Some protocols are a
        multi-layered protocol built on top of other lower level protocol. Some
        are too complicated to be implemented as a single state machine.
      </para>
      <para>
        Consequently, a good network application framework should provide an
        extensible, reusable, unit-testable, and multi-layered codec framework
        that generates maintainable user codec.
      </para>
      <para>
        Netty provides a number of fundamental and advanced codecs built on top
        of the core to address most issues you will encounter when you write a
        protocol codec regardless if it is simple or not, binary or text -
        simply whatever.
      </para>
    </section>
    
    <section>
      <title>SSL / TLS Support</title>
      <para>
        
      </para>
    </section>

    <section>
      <title>HTTP Implementation</title>
      <para>
        
      </para>
    </section>
    
    <section>
      <title>Google Protocol Buffer Integration</title>
      <para>
        
      </para>
    </section>
  </section>

  <section>
    <title>Summary</title>
    <para>
      
    </para>
  </section>
</chapter>
